/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type PlayerStruct = {
  id: PromiseOrValue<BigNumberish>;
  add_: PromiseOrValue<string>;
  username: PromiseOrValue<string>;
  score: PromiseOrValue<BigNumberish>;
  gamesPlayed: PromiseOrValue<BigNumberish>;
  blacklisted: PromiseOrValue<boolean>;
};

export type PlayerStructOutput = [
  BigNumber,
  string,
  string,
  number,
  BigNumber,
  boolean
] & {
  id: BigNumber;
  add_: string;
  username: string;
  score: number;
  gamesPlayed: BigNumber;
  blacklisted: boolean;
};

export type TournamentStruct = {
  id: PromiseOrValue<BigNumberish>;
  name: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  deadline: PromiseOrValue<BigNumberish>;
  minimumStakeAmount: PromiseOrValue<BigNumberish>;
  totalStake: PromiseOrValue<BigNumberish>;
  isPrivate: PromiseOrValue<boolean>;
  createdAt: PromiseOrValue<BigNumberish>;
  owner: PromiseOrValue<string>;
  tournamentKey: PromiseOrValue<string>;
};

export type TournamentStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  string,
  string
] & {
  id: BigNumber;
  name: string;
  description: string;
  deadline: BigNumber;
  minimumStakeAmount: BigNumber;
  totalStake: BigNumber;
  isPrivate: boolean;
  createdAt: BigNumber;
  owner: string;
  tournamentKey: string;
};

export interface WordChainInterface extends utils.Interface {
  functions: {
    "blackList(uint256)": FunctionFragment;
    "blackListAddress(address)": FunctionFragment;
    "checkIfUserIsAStakingPlayer(uint256,address)": FunctionFragment;
    "checkIfUserIsATournamentPlayer(uint256,address)": FunctionFragment;
    "checkIfUsernameExists(string)": FunctionFragment;
    "closeTournament(uint256)": FunctionFragment;
    "createTournament(string,string,uint256,uint8,bool,string)": FunctionFragment;
    "createUser(string)": FunctionFragment;
    "dispatchRewards(uint256,address,address,address)": FunctionFragment;
    "getTournamentPlayers(uint256)": FunctionFragment;
    "getTournamentsJoined(address)": FunctionFragment;
    "getTournamentsOwned(address)": FunctionFragment;
    "joinTournament(uint256,string)": FunctionFragment;
    "sendScore(uint256,uint8,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blackList"
      | "blackListAddress"
      | "checkIfUserIsAStakingPlayer"
      | "checkIfUserIsATournamentPlayer"
      | "checkIfUsernameExists"
      | "closeTournament"
      | "createTournament"
      | "createUser"
      | "dispatchRewards"
      | "getTournamentPlayers"
      | "getTournamentsJoined"
      | "getTournamentsOwned"
      | "joinTournament"
      | "sendScore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blackList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "blackListAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfUserIsAStakingPlayer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfUserIsATournamentPlayer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfUsernameExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTournament",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTournament",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTournamentPlayers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTournamentsJoined",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTournamentsOwned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTournament",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendScore",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "blackList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blackListAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfUserIsAStakingPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfUserIsATournamentPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfUsernameExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dispatchRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTournamentPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTournamentsJoined",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTournamentsOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendScore", data: BytesLike): Result;

  events: {
    "BlackListAddress(address)": EventFragment;
    "CreateTournament(uint256,string,string,uint256,uint8,bool,uint256,address)": EventFragment;
    "CreateUser(address,string)": EventFragment;
    "DispatchReward(uint256,address,uint256)": EventFragment;
    "JoinTournament(uint256,address)": EventFragment;
    "StartTournament(uint256,uint256)": EventFragment;
    "TournamentOwnershipTransfer(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlackListAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateTournament"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DispatchReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinTournament"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartTournament"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TournamentOwnershipTransfer"
  ): EventFragment;
}

export interface BlackListAddressEventObject {
  arg0: string;
}
export type BlackListAddressEvent = TypedEvent<
  [string],
  BlackListAddressEventObject
>;

export type BlackListAddressEventFilter =
  TypedEventFilter<BlackListAddressEvent>;

export interface CreateTournamentEventObject {
  arg0: BigNumber;
  arg1: string;
  arg2: string;
  arg3: BigNumber;
  arg4: number;
  arg5: boolean;
  arg6: BigNumber;
  arg7: string;
}
export type CreateTournamentEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, number, boolean, BigNumber, string],
  CreateTournamentEventObject
>;

export type CreateTournamentEventFilter =
  TypedEventFilter<CreateTournamentEvent>;

export interface CreateUserEventObject {
  arg0: string;
  arg1: string;
}
export type CreateUserEvent = TypedEvent<
  [string, string],
  CreateUserEventObject
>;

export type CreateUserEventFilter = TypedEventFilter<CreateUserEvent>;

export interface DispatchRewardEventObject {
  arg0: BigNumber;
  arg1: string;
  arg2: BigNumber;
}
export type DispatchRewardEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DispatchRewardEventObject
>;

export type DispatchRewardEventFilter = TypedEventFilter<DispatchRewardEvent>;

export interface JoinTournamentEventObject {
  arg0: BigNumber;
  arg1: string;
}
export type JoinTournamentEvent = TypedEvent<
  [BigNumber, string],
  JoinTournamentEventObject
>;

export type JoinTournamentEventFilter = TypedEventFilter<JoinTournamentEvent>;

export interface StartTournamentEventObject {
  arg0: BigNumber;
  arg1: BigNumber;
}
export type StartTournamentEvent = TypedEvent<
  [BigNumber, BigNumber],
  StartTournamentEventObject
>;

export type StartTournamentEventFilter = TypedEventFilter<StartTournamentEvent>;

export interface TournamentOwnershipTransferEventObject {
  arg0: BigNumber;
  arg1: string;
}
export type TournamentOwnershipTransferEvent = TypedEvent<
  [BigNumber, string],
  TournamentOwnershipTransferEventObject
>;

export type TournamentOwnershipTransferEventFilter =
  TypedEventFilter<TournamentOwnershipTransferEvent>;

export interface WordChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WordChainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blackList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    blackListAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkIfUserIsAStakingPlayer(
      tournamentId_: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkIfUserIsATournamentPlayer(
      tournamentId_: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkIfUsernameExists(
      username_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    closeTournament(
      tournamentId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTournament(
      name_: PromiseOrValue<string>,
      desc_: PromiseOrValue<string>,
      interval_: PromiseOrValue<BigNumberish>,
      minimumStake_: PromiseOrValue<BigNumberish>,
      isPrivate_: PromiseOrValue<boolean>,
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createUser(
      username_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dispatchRewards(
      tournamentId_: PromiseOrValue<BigNumberish>,
      first: PromiseOrValue<string>,
      second: PromiseOrValue<string>,
      third: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTournamentPlayers(
      tournamentId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PlayerStructOutput[]]>;

    getTournamentsJoined(
      add_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[TournamentStructOutput[]]>;

    getTournamentsOwned(
      add_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[TournamentStructOutput[]]>;

    joinTournament(
      tournamentId_: PromiseOrValue<BigNumberish>,
      key_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendScore(
      tournamentId_: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      playerTournamentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  blackList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  blackListAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkIfUserIsAStakingPlayer(
    tournamentId_: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkIfUserIsATournamentPlayer(
    tournamentId_: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkIfUsernameExists(
    username_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  closeTournament(
    tournamentId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTournament(
    name_: PromiseOrValue<string>,
    desc_: PromiseOrValue<string>,
    interval_: PromiseOrValue<BigNumberish>,
    minimumStake_: PromiseOrValue<BigNumberish>,
    isPrivate_: PromiseOrValue<boolean>,
    key: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createUser(
    username_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dispatchRewards(
    tournamentId_: PromiseOrValue<BigNumberish>,
    first: PromiseOrValue<string>,
    second: PromiseOrValue<string>,
    third: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTournamentPlayers(
    tournamentId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PlayerStructOutput[]>;

  getTournamentsJoined(
    add_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TournamentStructOutput[]>;

  getTournamentsOwned(
    add_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TournamentStructOutput[]>;

  joinTournament(
    tournamentId_: PromiseOrValue<BigNumberish>,
    key_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendScore(
    tournamentId_: PromiseOrValue<BigNumberish>,
    score: PromiseOrValue<BigNumberish>,
    playerTournamentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blackList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    blackListAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkIfUserIsAStakingPlayer(
      tournamentId_: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkIfUserIsATournamentPlayer(
      tournamentId_: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIfUsernameExists(
      username_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeTournament(
      tournamentId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createTournament(
      name_: PromiseOrValue<string>,
      desc_: PromiseOrValue<string>,
      interval_: PromiseOrValue<BigNumberish>,
      minimumStake_: PromiseOrValue<BigNumberish>,
      isPrivate_: PromiseOrValue<boolean>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createUser(
      username_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dispatchRewards(
      tournamentId_: PromiseOrValue<BigNumberish>,
      first: PromiseOrValue<string>,
      second: PromiseOrValue<string>,
      third: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTournamentPlayers(
      tournamentId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PlayerStructOutput[]>;

    getTournamentsJoined(
      add_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TournamentStructOutput[]>;

    getTournamentsOwned(
      add_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TournamentStructOutput[]>;

    joinTournament(
      tournamentId_: PromiseOrValue<BigNumberish>,
      key_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendScore(
      tournamentId_: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      playerTournamentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlackListAddress(address)"(
      arg0?: PromiseOrValue<string> | null
    ): BlackListAddressEventFilter;
    BlackListAddress(
      arg0?: PromiseOrValue<string> | null
    ): BlackListAddressEventFilter;

    "CreateTournament(uint256,string,string,uint256,uint8,bool,uint256,address)"(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null,
      arg2?: null,
      arg3?: null,
      arg4?: null,
      arg5?: null,
      arg6?: null,
      arg7?: null
    ): CreateTournamentEventFilter;
    CreateTournament(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null,
      arg2?: null,
      arg3?: null,
      arg4?: null,
      arg5?: null,
      arg6?: null,
      arg7?: null
    ): CreateTournamentEventFilter;

    "CreateUser(address,string)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: null
    ): CreateUserEventFilter;
    CreateUser(
      arg0?: PromiseOrValue<string> | null,
      arg1?: null
    ): CreateUserEventFilter;

    "DispatchReward(uint256,address,uint256)"(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null,
      arg2?: null
    ): DispatchRewardEventFilter;
    DispatchReward(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null,
      arg2?: null
    ): DispatchRewardEventFilter;

    "JoinTournament(uint256,address)"(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null
    ): JoinTournamentEventFilter;
    JoinTournament(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null
    ): JoinTournamentEventFilter;

    "StartTournament(uint256,uint256)"(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null
    ): StartTournamentEventFilter;
    StartTournament(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null
    ): StartTournamentEventFilter;

    "TournamentOwnershipTransfer(uint256,address)"(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null
    ): TournamentOwnershipTransferEventFilter;
    TournamentOwnershipTransfer(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: null
    ): TournamentOwnershipTransferEventFilter;
  };

  estimateGas: {
    blackList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackListAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkIfUserIsAStakingPlayer(
      tournamentId_: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIfUserIsATournamentPlayer(
      tournamentId_: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIfUsernameExists(
      username_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeTournament(
      tournamentId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTournament(
      name_: PromiseOrValue<string>,
      desc_: PromiseOrValue<string>,
      interval_: PromiseOrValue<BigNumberish>,
      minimumStake_: PromiseOrValue<BigNumberish>,
      isPrivate_: PromiseOrValue<boolean>,
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createUser(
      username_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dispatchRewards(
      tournamentId_: PromiseOrValue<BigNumberish>,
      first: PromiseOrValue<string>,
      second: PromiseOrValue<string>,
      third: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTournamentPlayers(
      tournamentId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTournamentsJoined(
      add_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTournamentsOwned(
      add_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinTournament(
      tournamentId_: PromiseOrValue<BigNumberish>,
      key_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendScore(
      tournamentId_: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      playerTournamentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blackList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackListAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkIfUserIsAStakingPlayer(
      tournamentId_: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIfUserIsATournamentPlayer(
      tournamentId_: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIfUsernameExists(
      username_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeTournament(
      tournamentId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTournament(
      name_: PromiseOrValue<string>,
      desc_: PromiseOrValue<string>,
      interval_: PromiseOrValue<BigNumberish>,
      minimumStake_: PromiseOrValue<BigNumberish>,
      isPrivate_: PromiseOrValue<boolean>,
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createUser(
      username_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dispatchRewards(
      tournamentId_: PromiseOrValue<BigNumberish>,
      first: PromiseOrValue<string>,
      second: PromiseOrValue<string>,
      third: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTournamentPlayers(
      tournamentId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTournamentsJoined(
      add_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTournamentsOwned(
      add_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinTournament(
      tournamentId_: PromiseOrValue<BigNumberish>,
      key_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendScore(
      tournamentId_: PromiseOrValue<BigNumberish>,
      score: PromiseOrValue<BigNumberish>,
      playerTournamentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
